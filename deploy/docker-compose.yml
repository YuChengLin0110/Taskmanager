services:
  taskmanager-config-server:
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"] # 用 curl 確認服務健康狀況
      interval: 3s # 每幾秒檢查一次
      timeout: 2s # 最多等幾秒沒回應就判定失敗
      retries: 5 # 失敗重試次數
    build:
      context: ../../TaskmanagerConfigServer # 建置時，Dockerfile 所在的目錄，以 docker-compose 的位置當基準
      dockerfile: Dockerfile # 指定要用的 Dockerfile
    image: config-server
    container_name: ConfigServer
    ports:
      - "8888:8888"
  
  taskmanager:
    env_file:
      - .env # 環境變數從 .env 檔讀取
    build: 
      context: ../../Taskmanager
      dockerfile: Dockerfile
    image: taskmanager
    container_name: TaskmanagerApp
    ports:
      - "8080:8080" # 映射容器的 8080 到本機
    depends_on:
      mysql-master:
        condition: service_healthy
      mysql-slave:
        condition: service_healthy
      redis:
        condition: service_started # 這個服務要等 redis 啟動完成才會啟動
      rabbitmq:
        condition: service_started
      taskmanager-config-server:
        condition: service_healthy # 這個服務要等 config server 健康檢查通過才會啟動
    environment: # 設定要傳進容器內的環境變數
      SPRING_PROFILES_ACTIVE: prod # 告訴 Spring Boot 啟用哪一組環境設定檔 application-prod.yml
      SPRING_REDIS_HOST: ${SPRING_REDIS_HOST} # Redis 主機位置，從 .env 取得
      SPRING_REDIS_PORT: ${SPRING_REDIS_PORT}
      SPRING_RABBITMQ_HOST: ${SPRING_RABBITMQ_HOST}
      SPRING_RABBITMQ_PORT: ${SPRING_RABBITMQ_PORT}
#      SPRING_CLOUD_CONFIG_ENABLED: "false" # 關閉 config server
      SPRING_CONFIG_IMPORT: "optional:configserver:http://taskmanager-config-server:8888" # 從 Config Server 匯入設定

  redis:
    image: redis:7-alpine
    container_name: taskmanager-redis
    ports:
      - "6379:6379"
   # volumes:        先註解，不將資料持久化
    #  - redis-data:/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: taskmanager-rabbitmq
    ports:
      - "5672:5672"    # RabbitMQ 傳遞消息的 port
      - "15672:15672"  # 管理介面
    environment: # 設定要傳進容器內的環境變數
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_DEFAULT_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_DEFAULT_PASS}
   # volumes:        先註解，不將資料持久化
    #  - rabbitmq-data:/var/lib/rabbitmq

  mysql-master:
    image: mysql:8.0.38
    container_name: mysql-master
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: task_manager
    volumes:
      - ./master-data:/var/lib/mysql
      - ./mysql/master.cnf:/etc/mysql/conf.d/custom.cnf
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s # 每幾秒檢查一次
      timeout: 3s # 最多等幾秒沒回應就判定失敗
      retries: 10 # 失敗重試次數

  mysql-slave:
    image: mysql:8.0.38
    container_name: mysql-slave
    ports:
      - "3308:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: task_manager
    volumes:
      - ./slave-data:/var/lib/mysql
      - ./mysql/slave.cnf:/etc/mysql/conf.d/custom.cnf
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 5s # 每幾秒檢查一次
      timeout: 3s # 最多等幾秒沒回應就判定失敗
      retries: 10 # 失敗重試次數

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181 # Zookeeper 內部設定客戶端連接埠

  kafka:
    image: confluentinc/cp-kafka:7.0.1
    container_name: kafka
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1 # Kafka Broker 的唯一 ID
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181 # Kafka 連接到 Zookeeper 容器和端口
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT # 通訊協議設定，使用 PLAINTEXT（非加密
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # Kafka 對外宣告的連接位址與端口，供其他服務連接
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # 消費者偏移量紀錄的副本數量
                                                # 1 表示只有一份備份
                                                # 生產環境建議設為 2 或以上，提高資料可靠性
                                                      
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: taskmanagerKafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092 # Kafka UI 連接 Kafka 位址
    depends_on:
      - kafka

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ../prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
   # volumes:
     # - grafana-storage:/var/lib/grafana
    depends_on:
      - prometheus

# volumes:        先註解，不將資料持久化
#  redis-data:
#  rabbitmq-data:
#  grafana-storage: