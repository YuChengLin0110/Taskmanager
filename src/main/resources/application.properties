# 除本機測試 改成由 Spring Cloud Config 抓取設定
spring.application.name=taskmanager
#
##JWT 秘鑰 給 JWTUtils 取值用
jwt.secretKey=taskManagerSuperSecretKey1234567890
#
## Server port
server.port=8080
#
## RabbitMQ
rabbitmq.retry.max=10
## Exchange
rabbitmq.exchange=task.exchange
rabbitmq.exchange.dlq=task.exchange.dlq
#
## Routing Keys
rabbitmq.routingkey.task.pattern=task.#
rabbitmq.routingkey.task.created=task.created
rabbitmq.routingkey.task.assigned=task.assigned
rabbitmq.routingkey.task.overdue=task.overdue
rabbitmq.routingkey.task.dlq=task.dlq
#
## Queue Names
rabbitmq.queue.task.created=task.created.queue
rabbitmq.queue.task.assigned=task.assigned.queue
rabbitmq.queue.task.overdue=task.overdue.queue
rabbitmq.queue.task.dlq=task.dlq.queue
#
## Redis
# 本機
spring.data.redis.host=localhost
# Docker 的 Redis
#spring.data.redis.host=redis
spring.data.redis.port=6379
spring.data.redis.timeout=3000ms

## Lettuce pool (SpringBoot 預設的Redis框架是Lettuce)
spring.redis.lettuce.pool.max-active=10
spring.redis.lettuce.pool.max-idle=10
spring.redis.lettuce.pool.min-idle=1
spring.redis.lettuce.pool.max-wait=1s
#
## ThreadPoolTaskExecutor
## 最小的執行緒數量
spring.task.execution.pool.core-size=5
## 最大的執行緒數量
spring.task.execution.pool.max-size=10
## 任務隊列的容量。當執行緒池達到最大執行緒數量時，新的任務會被放入隊列中，直到有執行緒空閒出來
spring.task.execution.pool.queue-capacity=25
## 當執行緒空閒超過這段時間，會被銷燬，直到執行緒池中的執行緒數量等於 core-size
spring.task.execution.pool.keep-alive=60s
#
#
## OpenAPI / Swagger
springdoc.api-docs.path=/v3/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
#
## MyBatis
## 指定 mapper XML 的位置
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.example.taskmanager.entity
## 將資料庫欄位名稱（通常是蛇形命名， user_name）轉換為 Java 物件的駝峰命名（userName），避免 SQL 結果和 Java 類的映射錯誤
mybatis.configuration.map-underscore-to-camel-case=true
## 印出 MyBatis 執行的 SQL 在 console
mybatis.configuration.log-impl=org.apache.ibatis.logging.stdout.StdOutImpl

#JPA
# 自動建立更新資料表結構
spring.jpa.hibernate.ddl-auto=update

#
## H2  改用 MySQL
## 記憶體模式；重啟後資料會清空
#spring.datasource.url=jdbc:h2:mem:taskdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false
## JDBC Driver
#spring.datasource.driver-class-name=org.h2.Driver
## Hibernate Dialect 對應 H2
#spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
## H2 console 啟用
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#
# MySQL
## Hibernate 方言 對應 MySQL
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
# Master
# 正式環境不使用 allowPublicKeyRetrieval=true , useSSL 改成 true
# 本機SpringBoot + Docker MySQL
spring.datasource.master.url:jdbc:mysql://localhost:3307/task_manager?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
# Docker SpringBoot + MySQL
#spring.datasource.master.url:jdbc:mysql://mysql-master:3306/task_manager?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.datasource.master.username=root
spring.datasource.master.password=root
spring.datasource.master.drive-class-name=com.mysql.cj.jdbc.Driver
# 最多同時存在幾個 connection
spring.datasource.master.hikari.maximum-pool-size=10
# 最少保持幾個閒置連線
spring.datasource.master.hikari.minimum-idle=2
# 閒置多久會被關閉（毫秒）
spring.datasource.master.hikari.idle-timeout=30000
# 等待連線的最大時間
spring.datasource.master.hikari.connection-timeout=300000
spring.datasource.master.hikari.pool-name=HikariMasterPool
# 每個 connection 存活時間，過久會自動斷開再創建
spring.datasource.master.hikari.max-lifetime=1800000
# Slave
# 正式環境不使用 allowPublicKeyRetrieval=true , useSSL 改成 true
# 本機SpringBoot + Docker MySQL
spring.datasource.slave.url:jdbc:mysql://localhost:3308/task_manager?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
# Docker SpringBoot + MySQL
#spring.datasource.slave.url:jdbc:mysql://mysql-slave:3306/task_manager?allowPublicKeyRetrieval=true&useSSL=false&serverTimezone=UTC
spring.datasource.slave.username=root
spring.datasource.slave.password=root
spring.datasource.slave.drive-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.slave.hikari.maximum-pool-size=20
spring.datasource.slave.hikari.minimum-idle=5
spring.datasource.slave.hikari.idle-timeout=30000
spring.datasource.slave.hikari.connection-timeout=300000
spring.datasource.slave.hikari.pool-name=HikariSlavePool
spring.datasource.slave.hikari.max-lifetime=1800000

# Kafka
# SpringBoot在本機
# Kafka 伺服器的位置
spring.kafka.bootstrap-servers=localhost:9092
# SpringBoot在Docker
# Kafka 伺服器的位置
#spring.kafka.bootstrap-servers=kafka:9092
# 消費者群組 ID，決定一組消費者共享偏移量
spring.kafka.consumer.group-id=notification-group
# 如果找不到偏移量，從最早訊息開始讀取
spring.kafka.consumer.auto-offset-reset=earliest
# key 用 JSON 方式反序列化
spring.kafka.consumer.key-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# value 用 JSON 方式反序列化
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
# 指定反序列化時允許信任的類別所在的 package ，如果不指定，Spring Kafka 的 JsonDeserializer 預設會拒絕所有反序列化請求
spring.kafka.consumer.properties.spring.json.trusted.packages=com.example.taskmanager.entity.dto
# key 用 JSON 方式序列化
spring.kafka.producer.key-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# value 用 JSON 方式序列化
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# 自訂 @ConditionalOnProperty 切換 notification publisher 使用 一般Listener 或是 kafka
# default / kafka
notification.mode=kafka


# Java Mail
# SMTP 主機位址
spring.mail.host=smtp.gmail.com
# SMTP 連接埠（587 表示支援 TLS 加密）
spring.mail.port=587
spring.mail.username=email@gmail.com
spring.mail.password=password
# 傳輸協定
spring.mail.protocol=smtp
spring.mail.default-encoding=UTF-8
spring.mail.test-connection=false
# 啟用 SMTP 驗證，需要帳號密碼登入
spring.mail.properties.mail.smtp.auth=true
# 啟用 TLS 安全傳輸層加密， 587 port 常用設定
spring.mail.properties.mail.smtp.starttls.enable=true

## 指定哪些 Actuator endpoint 是對外開放的（可透過 HTTP 存取，例如 /actuator/health）
management.endpoints.web.exposure.include=prometheus,health,metrics